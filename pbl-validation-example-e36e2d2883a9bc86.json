[{"parent":"ValidationExample","file":"validation.component.ts","title":"Validation","lang":"typescript","source":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { ValidationErrors,  AbstractControl } from '@angular/forms';\nimport { BeforeRenderEventHandler } from '@pebula/nform';\n\nimport { Hero } from './model';\n\n@Component({\n  selector: 'pbl-validation-example',\n  templateUrl: './validation.component.html',\n  styleUrls: ['./validation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ValidationExample {\n  model = new Hero();\n\n  beforeRender(event: BeforeRenderEventHandler): void {\n    if (event.isRoot) {\n      const nameRecord = event.records['name'];\n      nameRecord.asyncValidators = fakeCheckName;\n    }\n  }\n}\n\nfunction fakeCheckName(c: AbstractControl): Promise<ValidationErrors | null> {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const name = c.value || '';\n      if (!name || name[0].toLowerCase() === 'a') {\n        resolve({\n          nameExists: `${name} already exists`\n        });\n      } else {\n        resolve(null);\n      }\n    }, 1000);\n  });\n}\n\n\n","contents":"<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ChangeDetectionStrategy<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">,</span> ViewEncapsulation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ValidationErrors<span class=\"token punctuation\">,</span>  AbstractControl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/forms'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BeforeRenderEventHandler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/nform'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Hero <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./model'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'pbl-validation-example'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token operator\">:</span> <span class=\"token string\">'./validation.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./validation.component.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  encapsulation<span class=\"token operator\">:</span> ViewEncapsulation<span class=\"token punctuation\">.</span>None<span class=\"token punctuation\">,</span>\n  changeDetection<span class=\"token operator\">:</span> ChangeDetectionStrategy<span class=\"token punctuation\">.</span>OnPush<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidationExample</span> <span class=\"token punctuation\">{</span>\n  model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeRender</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> BeforeRenderEventHandler<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>isRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> nameRecord <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      nameRecord<span class=\"token punctuation\">.</span>asyncValidators <span class=\"token operator\">=</span> fakeCheckName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fakeCheckName</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> AbstractControl<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>ValidationErrors <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>name <span class=\"token operator\">||</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          nameExists<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> already exists</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre></div>"},{"parent":"ValidationExample","file":"./validation.component.html","title":"./validation.component.html","lang":"html","source":"<pbl-nform [model]=\"model\" (beforeRender)=\"beforeRender($event)\"></pbl-nform>\n","contents":"<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-nform</span> <span class=\"token attr-name\">[model]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>model<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(beforeRender)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>beforeRender($event)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-nform</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>"},{"parent":"","file":"model.ts","title":"model.ts","lang":"typescript","source":"import { FormModel, FormProp } from '@pebula/nform';\nimport { Validators } from '@angular/forms';\n\n@FormModel()\nexport class Hero {\n  @FormProp({\n    vType: 'number',\n    label: 'Hero ID',\n    validators: Validators.compose([ Validators.min(1000), Validators.max(999999) ])\n  })\n  id: number;\n\n  @FormProp({\n    required: true,\n    vType: 'text',\n    label: 'Hero Name',\n  })\n  name: string;\n}\n","contents":"<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> FormModel<span class=\"token punctuation\">,</span> FormProp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/nform'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Validators <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/forms'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    vType<span class=\"token operator\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">'Hero ID'</span><span class=\"token punctuation\">,</span>\n    validators<span class=\"token operator\">:</span> Validators<span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> Validators<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">999999</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    vType<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">'Hero Name'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}]