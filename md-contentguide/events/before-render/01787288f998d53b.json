{"id":"guide/events/before-render","title":"(beforeRender)","contents":"<h1 id=\"beforerender-event\"><a href=\"#beforerender-event\" aria-hidden><span class=\"icon icon-link\"></span></a>beforeRender Event</h1>\n<p>Event fired on the first render and then whenever the <code class=\"language-text\">PblNformComponent.redraw()</code> method is invoked.</p>\n<p>The <strong>beforeRender</strong> event is best for:</p>\n<ul>\n<li>Updating or modifying element metadata and/or visual types.</li>\n<li>Deferring rendering of the form until an async operation completes.</li>\n</ul>\n<p>The event emits an event handler object of type <code class=\"language-text\">BeforeRenderEventHandler</code>.</p>\n<p><code class=\"language-text\">BeforeRenderEventHandler</code> contains the record instances (<code class=\"language-text\">NFormRecordRef</code>) used by <strong>nForm</strong> and it is where we can alter each instance to change the way it will render or what data it will render with.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The records (\n<code class=\"language-text\">NFormRecordRef</code>\n) represent the form controls, we cover it in depth \n<a href=\"../before-render#nformrecordref\">below</a>\n</blockquote>\n<h2 id=\"notifying-about-async-operations\"><a href=\"#notifying-about-async-operations\" aria-hidden><span class=\"icon icon-link\"></span></a>Notifying about async operations</h2>\n<p><code class=\"language-text\">BeforeRenderEventHandler</code> is also an API to notify <strong>nForm</strong> that it should <strong>pause all rendering</strong> until an async operation\nfinish by providing a promise. The component will not render control until the promise resolves.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Async operations are great for fetching remote data from the server, e.g. populating a selection box, updating the record and\nreturning control to \n<strong>nForm</strong>\n which will now render it with new options added.\n</blockquote>\n<div pbl-example-view=\"pbl-before-render-example\"></div>\n<p>This example changes the bmi field rendering type from slider to `number.</p>\n<p>We will also mock an async call to a server to fetch 5 more super powers in addition to the 5 that already exist. The mock creates 1000ms timeout which in that time the form will not render.</p>\n<p>To reduce noise some form controls are excluded.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Working with async operations requires user feedback (e.g. spinner).\nThe (renderState) covered next is where we can subscribe to notification about the rendering state, paused or not.\n</blockquote>\n<h2 id=\"nformrecordref\"><a href=\"#nformrecordref\" aria-hidden><span class=\"icon icon-link\"></span></a>NFormRecordRef</h2>\n<p>It is important to understand the role of the <code class=\"language-text\">NFormRecordRef</code> class and the relationship between the 3 building blocks of <code class=\"language-text\">@angular/forms</code>: <code class=\"language-text\">FormGroup</code>, <code class=\"language-text\">FormArray</code> and <code class=\"language-text\">FormControl</code> to <code class=\"language-text\">NFormRecordRef</code>.</p>\n<p>Each property decorated by <code class=\"language-text\">@FormProp</code> contains metadata defined by the user which the library use to create an instance of <code class=\"language-text\">NFormRecordRef</code>. An instruction represents a single property and contains metadata about it like the type, how it should look like in a form and more.</p>\n<p><code class=\"language-text\">NFormRecordRef</code> is used to describe all properties, those can be primitive but can also be arrays and objects. This means that <code class=\"language-text\">NFormRecordRef</code> can also contain children of <code class=\"language-text\">NFormRecordRef</code></p>\n<p>When we create a new <strong>nForm</strong> component the library will use all 3 building blocks of <code class=\"language-text\">@angular/forms</code> to create a <code class=\"language-text\">FormGroup</code> instance that match the structure of our model, as described by us using <code class=\"language-text\">@FormProp</code>.</p>\n<p>In the new form, for each form control, <code class=\"language-text\">FormGroup</code>, <code class=\"language-text\">FormArray</code> or <code class=\"language-text\">FormControl</code> there is a corresponding <code class=\"language-text\">NFormRecordRef</code> instance. The instance is cloned so different forms of the same model will never get the same <code class=\"language-text\">NFormRecordRef</code> instance, this is important as it is based on static metadata which is shared thus can not change.</p>\n<p>If we take a <code class=\"language-text\">&lt;select></code> control as an example, it has a list of options to choose from and it is quite common to update the list based on logic or some data source.</p>\n<p>It is also common to change the visual type of an element based on some logic.</p>\n<p>This is why we create a new set of <code class=\"language-text\">NFormRecordRef</code>s per form.</p>\n"}