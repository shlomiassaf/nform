{"id":"guide/events/value-changes","title":"(valueChanges)","contents":"<h1 id=\"valuechanges-event\"><a href=\"#valuechanges-event\" aria-hidden><span class=\"icon icon-link\"></span></a>valueChanges Event</h1>\n<p>Event fired when the value of a form control changed.</p>\n<p>The <strong>valueChanges</strong> event is best for:</p>\n<ul>\n<li>Getting notification about value change</li>\n<li>Update form state based on value-bound logic.\nFor example:<ul>\n<li>disable control X when the value of control Y === Z</li>\n<li>hide control Y when value of control X is not set</li>\n<li>Fetch values from the server when the value of control Y === Z and use them to populate the select options for control X.</li>\n</ul></li>\n</ul>\n<h2 id=\"working-with-changes\"><a href=\"#working-with-changes\" aria-hidden><span class=\"icon icon-link\"></span></a>Working with changes</h2>\n<p>The event emits a collection of changes based on the <code class=\"language-text\">KeyValueChangeRecord</code> from <code class=\"language-text\">@angular/core</code>.</p>\n<p>The type of the collection is <code class=\"language-text\">NFormValueChanges</code> which is an array of <code class=\"language-text\">NFormValueChange</code> values.</p>\n<p><code class=\"language-text\">NFormValueChange</code> extends <code class=\"language-text\">KeyValueChangeRecord&lt;string, any></code> and adds the optional property <strong>deep</strong> which indicates if the key points to a deep path (dot notation) or a single property.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NFormValueChange</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">KeyValueChangeRecord<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Part of KeyValueChangeRecord - Duplicated for documentation only */</span>\n\n  <span class=\"token comment\">/** Current key in the Map. */</span>\n  <span class=\"token keyword\">readonly</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** Current value for the key or `null` if removed. */</span>\n  <span class=\"token keyword\">readonly</span> currentValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** Previous value for the key or `null` if added. */</span>\n  <span class=\"token keyword\">readonly</span> previousValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* Part of KeyValueChangeRecord - Duplicated for documentation only */</span>\n\n  <span class=\"token comment\">/**\n   * When true indicates that the `key` property contains a path and not a name, i.e it's a dot delimited path to a\n   * property through nested object (or objects)\n   */</span>\n  deep<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<h2 id=\"updating-values\"><a href=\"#updating-values\" aria-hidden><span class=\"icon icon-link\"></span></a>Updating values</h2>\n<p>Updating values in response to a value change event requires an update to the value of a form control.<br>\nThe easiest and safest way is to use the <code class=\"language-text\">setValue()</code> method on the <a href=\"../../advanced-modeling/controlling-nform\">NForm controller</a>, which was not covered yet.</p>\n<h3 id=\"updating-in-valuechanges-is-safe\"><a href=\"#updating-in-valuechanges-is-safe\" aria-hidden><span class=\"icon icon-link\"></span></a>Updating in (valueChanges) is safe</h3>\n<p>Updating values inside the (valueChanges) event is safe and will not create an infinite update loop.</p>\n<p>This is possible because:</p>\n<ul>\n<li><strong>valueChanges</strong> events are synchronous, emitting all listeners in sequence.</li>\n<li><strong>valueChanges</strong> events are blocking. While a valueChanges event run incoming change events are ignored.</li>\n</ul>\n<p>This enables safe updates to the form.</p>\n<p>If you want to change the value and force firing the event apply the value change async (i.e. setTimeout).</p>\n<h2 id=\"valuechanges-and-nested-objects\"><a href=\"#valuechanges-and-nested-objects\" aria-hidden><span class=\"icon icon-link\"></span></a><strong>valueChanges</strong> and nested objects</h2>\n<p>When the change occurs in a child property of nested objects the key property in the change event handler\nrepresents the path (not the name) to the value from the root object.</p>\n<p>In the following example <strong>valueChanges</strong> events are used to update state and values based on custom logic.</p>\n<ul>\n<li>The <strong>id</strong> property is disabled</li>\n<li>When the <strong>name</strong> property change the <strong>id</strong> is set to the length of the name</li>\n<li>When <strong>doubleAgent</strong> is set to <code class=\"language-text\">true</code> the <strong>hasTracking</strong> control is disabled and the value for it is set to <code class=\"language-text\">false</code>.</li>\n</ul>\n<div pbl-example-view=\"pbl-value-changes-example\"></div>\n"}