{"id":"guide/basics/form-layout","title":"Form Layout","contents":"<h1 id=\"form-layout\"><a href=\"#form-layout\" aria-hidden><span class=\"icon icon-link\"></span></a>Form Layout</h1>\n<p>The form layout describes how the form controls within the forms flow.  </p>\n<p>For example, we can create a form with all controls rendering one after the other, <strong>Horizontally</strong>:</p>\n<div pbl-example-view=\"pbl-horizontal-form-layout-example\"></div>\n<p><strong>Vertically</strong>:</p>\n<div pbl-example-view=\"pbl-vertical-form-layout-example\"></div>\n<p>Or, using <strong>flex box</strong>, allowing complex grid like capabilities.<br>\nIn the following example, a responsive 3-column layout design, using flex box via angular <a href=\"https://github.com/angular/flex-layout\">flex-layout library</a></p>\n<div pbl-example-view=\"pbl-flex-form-layout-example\"></div>\n<p>There are a lot of ways to control the layout:</p>\n<ul>\n<li>Using CSS Classes</li>\n<li>Using Template Overrides</li>\n<li>Using Renderers</li>\n</ul>\n<p>In this chapter we will focus on layout using <strong>Template Override</strong> and how we declare <code class=\"language-text\">pbl-nform</code> can help us control the layout.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<strong>Using CSS Classes</strong>\n will work but it is more complex to reason about, especially with angular's view encapsulation. We will not discuss it in the tutorial.\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<strong>Using Renderers</strong>\n is an advanced scenario, discussed later in the guide.\n<br>\n\n\nIn the examples above you might have noticed repetitive code use when creating template overrides, this is where \n<strong>renderers</strong>\n come into play.\n</blockquote>\n<h2 id=\"declaring-pbl-nform\"><a href=\"#declaring-pbl-nform\" aria-hidden><span class=\"icon icon-link\"></span></a>Declaring <code class=\"language-text\">pbl-nform</code></h2>\n<p>There are 2 style we can declare the <code class=\"language-text\">NFormComponent</code> component:</p>\n<ol>\n<li><code class=\"language-text\">&lt;pbl-nform>&lt;/pbl-nform></code></li>\n<li><code class=\"language-text\">&lt;form pbl-nform>&lt;/form></code></li>\n</ol>\n<p>In the <strong>1st</strong> declaration style we let the component control and manage the <code class=\"language-text\">form</code> element, resulting in the following rendered structure:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-nform</span> <span class=\"token attr-name\">[model]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>model<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- FORM COMPONENTS... --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n&lt;/pbl-nform</code></pre></div></div>\n<p>We used this in the first example (horizontal).</p>\n<p>While this declaration style is fine for most simple to moderate scenarios, in complex scenarios you will want to control the element warping the controls.<br>\nBecause <code class=\"language-text\">&lt;form></code> is rendered by the internal template of <code class=\"language-text\">pbl-nform</code> it is hard to control and style it directly, to do so we will need to use CSS classes and / or renderers.</p>\n<p>In the <strong>2st</strong> declaration style we control and manage the <code class=\"language-text\">form</code> element, resulting in the following rendered structure:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">pbl-nform</span> <span class=\"token attr-name\">[model]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>model<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- FORM COMPONENTS... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>With this declaration style we have full control over the form controls and over their direct parent, this is what allowed us to use flex-box directives\ndirectly on the flex container and on the flex items directly (via template overrides).</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Because we are declaring the \n<code class=\"language-text\">form</code>\n directly in our component, angular's view encapsulation is not an issue. This is also true for form-control's if we use template overrides.\n</blockquote>\n<h2 id=\"creating-meta-driven-layout\"><a href=\"#creating-meta-driven-layout\" aria-hidden><span class=\"icon icon-link\"></span></a>Creating meta driven layout</h2>\n<p>We've covered the basic approach of how to layout your form, this is the core technique used to create complex layout.<br>\nUsing other tools offered by the library you can design a powerful meta-driven layout system.</p>\n<p>For example, by adding a <code class=\"language-text\">flex</code> property to the <code class=\"language-text\">data</code> object of each form property we can allow static declaration of our layout without using code.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    vType<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      flex<span class=\"token operator\">:</span> <span class=\"token string\">'0 1 65%'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    vType<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      flex<span class=\"token operator\">:</span> <span class=\"token string\">'0 1 35%'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  superHero<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>And in a custom template override:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*nFormOverride</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>*'; let ctx<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token selector\">flex:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> ctx.item.data?.flex <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>material-form-control-renderer</span> <span class=\"token attr-name\">[nFormCmp]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nForm<span class=\"token punctuation\">\"</span></span>\n                                    <span class=\"token attr-name\">[nForm]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.nForm<span class=\"token punctuation\">\"</span></span>\n                                    <span class=\"token attr-name\">[fArray]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.fArray<span class=\"token punctuation\">\"</span></span>\n                                    <span class=\"token attr-name\">[fControl]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.fControl<span class=\"token punctuation\">\"</span></span>\n                                    <span class=\"token attr-name\">[fGroup]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.fGroup<span class=\"token punctuation\">\"</span></span>\n                                    <span class=\"token attr-name\">[item]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>material-form-control-renderer</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>As previously mentioned, with <strong>renderers</strong> this can be fully automated, scoped and encapsulated, without the need of custom template overrides. (think plugin, addon, mini library)</p>\n<h2 id=\"control-rendering-order\"><a href=\"#control-rendering-order\" aria-hidden><span class=\"icon icon-link\"></span></a>Control Rendering Order</h2>\n<p>The entire layout methods we've covered allow us to control the space a control will take but not the position.<br>\nThe layout is declared by templates, we use templates to define a container that renders a control but when, where and\nin what order are they rendered?</p>\n<p><strong>nForm</strong> controls the rendering of components and it does that in the order defined in the metadata.<br>\nIf order is not explicitly defined, the default order is the order of the properties defined on the class (top to bottom).</p>\n<p>To define the order, use the <code class=\"language-text\">ordinal</code> property provided in <code class=\"language-text\">FormPropMetadataArgs</code>.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    vType<span class=\"token operator\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// I Will be third, i'm unordered but i'm the first unordered!!!</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    ordinal<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// I Will be second!!!</span>\n    vType<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    ordinal<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// I Will be first!!!</span>\n    vType<span class=\"token operator\">:</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  birth<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    vType<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  hasTracking<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    vType<span class=\"token operator\">:</span> <span class=\"token string\">'slideToggle'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  doubleAgent<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>In the example above, the rendering order of the controls will be:</p>\n<ul>\n<li>birth</li>\n<li>name</li>\n<li>id</li>\n<li>hasTracking</li>\n<li>doubleAgent</li>\n</ul>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Unordered controls are always set AFTER ordered controls, if there are multiple unordered controls their order is based on the order their respective\nproperties were defined on the class.\n</blockquote>\n<h2 id=\"breaking-the-layout\"><a href=\"#breaking-the-layout\" aria-hidden><span class=\"icon icon-link\"></span></a>Breaking the Layout</h2>\n<p><strong>nForm</strong> will render controls one after the other, in the order they are defined, can we break it?</p>\n<p>Yes, we can break the layout and we should do it if:</p>\n<ul>\n<li>We want to position control in an arbitrary order inside the form</li>\n<li>We need a complex layout, with internal structures (i.e. flex with nested columns/rows).</li>\n</ul>\n<p>To see how, visit <a href=\"../form-layout-pinning\">Form Layout Pinning</a></p>\n"}