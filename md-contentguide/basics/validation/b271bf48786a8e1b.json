{"id":"guide/basics/validation","title":"Validation","contents":"<h1 id=\"validation\"><a href=\"#validation\" aria-hidden><span class=\"icon icon-link\"></span></a>Validation</h1>\n<p>Validation in <strong>nForm</strong> is identical to the validation provided by <code class=\"language-text\">@angular/forms</code>,\n<strong>nForm</strong> is only used to pass-through validation configuration to the form instance.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Note that since \n<strong>nForm</strong>\n uses reactive-forms, validation implementation must be in that style.\n</blockquote>\n<p>Validation is applied on 2 levels:</p>\n<ul>\n<li>Model level - Provided in the metadata for <code class=\"language-text\">@FormModel</code></li>\n<li>Property level - Provided in the metadata for <code class=\"language-text\">@FormProp</code></li>\n</ul>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Validators <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/forms'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> FormModel<span class=\"token punctuation\">,</span> FormProp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@pebula/nform'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   validators<span class=\"token operator\">:</span> <span class=\"token function\">getValidatorOnTheEntireModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    validators<span class=\"token operator\">:</span> Validators<span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> Validators<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    asyncValidators<span class=\"token operator\">:</span> <span class=\"token function\">aFuncReturningAsyncPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  superHero<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<h2 id=\"required\"><a href=\"#required\" aria-hidden><span class=\"icon icon-link\"></span></a>Required</h2>\n<p>The <code class=\"language-text\">required</code> validation is unique because it also validates the structure of an object, additionally required is a common validator, widely used.</p>\n<p>For these reasons it can be set using a specific property.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n     required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Setting the property \n<code class=\"language-text\">required</code>\n to true/false will add/remove the required validation so you do not need to handle that in the \n<code class=\"language-text\">validation</code>\n / \n<code class=\"language-text\">asyncValidation</code>\n properties.\n</blockquote>\n<h2 id=\"dynamic-validation\"><a href=\"#dynamic-validation\" aria-hidden><span class=\"icon icon-link\"></span></a>Dynamic Validation</h2>\n<p>The metadata defined in the decorators is static so the validators we define there are static in nature.</p>\n<p>For example, if we want to validate a form control input against a server API request, we will need access to services (i.e: <code class=\"language-text\">HttpClient</code>) and other\nthings not available when creating the metadata.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n The \n<code class=\"language-text\">validation</code>\n / \n<code class=\"language-text\">asyncValidation</code>\n properties are not tracked by the change detection, you must update the whole array, mutating the array will not trigger a rebuild of the validation function for the control.\n</blockquote>\n<p>In the following example we define a static numeric validator for the <code class=\"language-text\">Hero Id</code> property allowing values from 1000 to 999999.</p>\n<p>In addition, we dynamically add <code class=\"language-text\">asyncValidator</code> when the form renders.</p>\n<div pbl-example-view=\"pbl-validation-example\"></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n When setting the name, watch how the status LED turns to blinking blue, this means PENDING state.\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n In this example we use the (beforeRender) event which is still not covered.\n</blockquote>\n"}