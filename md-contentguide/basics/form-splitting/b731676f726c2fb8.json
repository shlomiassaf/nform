{"id":"guide/basics/form-splitting","title":"Form Splitting","contents":"<h1 id=\"form-splitting\"><a href=\"#form-splitting\" aria-hidden><span class=\"icon icon-link\"></span></a>Form Splitting</h1>\n<p>Form splitting provides the ability to extract specific form controls out of the form and render them in a different location, outside the <code class=\"language-text\">&lt;form></code>.\nThis is only a UI separation, the logical structure is still in place.</p>\n<p>There are 2 ways to split:</p>\n<ol>\n<li>Pick specific control/s and renderer them elsewhere (<a href=\"../form-splitting#outlet-splitting\">Outlet Splitting</a>)</li>\n<li>Pick specific control/s and render them as a part of a different <strong>nForm</strong> component (<a href=\"../form-splitting#virtual-groups\">Virtual Groups</a>)</li>\n</ol>\n<h2 id=\"outlet-splitting\"><a href=\"#outlet-splitting\" aria-hidden><span class=\"icon icon-link\"></span></a>Outlet Splitting</h2>\n<p>In the angular vocabulary, an <strong>outlet</strong> usually represent a location in the view that acts as a placeholder for dynamic content injection.<br>\nOutlets provide a declarative and elegant solution when we want to show content in a specific place but renderer it in isolation.<br>\nThe <code class=\"language-text\">router-outlet</code> component is a good example, it is a location in the view that marks the place where the router will inject components based on the URL.  </p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Outlet's are powerful because they allow to define and render content with specific context and inject it elsewhere, outside of the block the context is bound to, while keeping access to that context.\n</blockquote>\n<div pbl-example-view=\"pbl-form-splitting-example\"></div>\n<p><strong>What did we do?</strong></p>\n<p>We've <strong>replaced</strong> the <code class=\"language-text\">superPower</code> field showing an <code class=\"language-text\">&lt;select></code> element with an <code class=\"language-text\">&lt;h3></code> element and <strong>projected</strong> the original\ncomponent in the location marked by the outlet.</p>\n<p>This was all done through the template, let's review the code:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-nform</span> <span class=\"token attr-name\">#nForm</span> <span class=\"token attr-name\">[model]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>model<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-nform</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red-super-power-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token attr-name\">*nformControlOutlet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>superPower'; let ctx; nFormCmp: nForm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Super Power Was Here, Now It's In The Red Box<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>It requires the <strong>nForm</strong> component as an input, and much like <a href=\"../template-overrides#control-query\">template override</a> templates, <code class=\"language-text\">NFormControlOutletDirective</code> also requires a control query, to match the control to extract and render in the outlet and also exports <code class=\"language-text\">NFormOverrideContext</code> as context.</p>\n<p>Because we've used a structural directive (<code class=\"language-text\">*nformControlOutlet</code>) result was <strong>replace and project</strong></p>\n<p><code class=\"language-text\">nformControlOutlet</code> can work in a non-structural way as way which will <strong>only project</strong> the control and remove it from the original location.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">nformControlOutlet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>superPower<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[nformControlOutletNFormCmp]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nForm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Similar to \n<code class=\"language-text\">&lt;router-outlet></code>\n the content is injected to the view container for the outlet, this means next to it as a sibling and not inside.\n</blockquote>\n<h2 id=\"virtual-groups\"><a href=\"#virtual-groups\" aria-hidden><span class=\"icon icon-link\"></span></a>Virtual Groups</h2>\n<p>Virtual groups allow splitting the same form instance over multiple <strong>nForm</strong> components, i.e. over multiple <code class=\"language-text\">&lt;form></code> blocks.</p>\n<p>A virtual group is a <strong>nForm</strong> component that is sharing it's model instance with another non-virtual <strong>nForm</strong> component.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n We call the non-virtual nForm component \n<strong>master</strong>\n and all other virtual group components are \n<strong>salve</strong>\n.\n</blockquote>\n<p>To define the relationship we use the <code class=\"language-text\">[slaveOf]</code> input.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-nform</span> <span class=\"token attr-name\">#nFrom</span> <span class=\"token attr-name\">[model]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>model<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-nform</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-nform</span> <span class=\"token attr-name\">[slaveOf]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nFrom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-nform</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<h3 id=\"slaveof\"><a href=\"#slaveof\" aria-hidden><span class=\"icon icon-link\"></span></a>slaveOF</h3>\n<ul>\n<li>Setting the <code class=\"language-text\">[model]</code> input is not allowed when a <strong>nForm</strong> component is defined as slave.</li>\n<li>Salve's are purely UI, all interaction should be done with the master.</li>\n</ul>\n<p>Because slave's are purely UI all of the form related features are not allowed on slave components, instead\nuse the through the master instance.</p>\n<p>Examples:</p>\n<ul>\n<li>All events originated from the form (value changes, state changes, etc...) will not work properly if registered on the slave form, instead register on the master.</li>\n<li>The disable state (<code class=\"language-text\">[disabledState]</code>) is based on form control state so it will not work properly if bound to a slave form, instead bind to the master. </li>\n<li><code class=\"language-text\">[hiddenState]</code> and <code class=\"language-text\">[filter]</code> are purely UI so they will work slaves, as well as template overrides and the <code class=\"language-text\">beforeRender</code> and <code class=\"language-text\">renderState</code> events.</li>\n</ul>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n When working with a master/slave setup make sure not to display the same form control in more then one dynamic form. Sync is not guaranteed and you might experience unexpected results. Use \n<code class=\"language-text\">[filter]</code>\n to control rendered control between the groups.\n</blockquote>\n<p>In the following example the form is split to 2 groups:</p>\n<div pbl-example-view=\"pbl-virtual-groups-example\"></div>\n<h3 id=\"wizards\"><a href=\"#wizards\" aria-hidden><span class=\"icon icon-link\"></span></a>Wizards</h3>\n<p>Now, 3 groups, tabbed:</p>\n<div pbl-example-view=\"pbl-virtual-groups-wizard-example\"></div>\n<p>Can you see how this easily qualify as a multi-step wizard?</p>\n<p>Virtual groups allows working with multiple forms while automatically synchronizing them, hiding the complexity.\nAfter committing the master, the model instance will reflect the state of the master form and all of the slaves as if they we're one.</p>\n"}