{"id":"guide/basics/template-overrides","title":"Template Overrides","contents":"<h1 id=\"template-overrides\"><a href=\"#template-overrides\" aria-hidden><span class=\"icon icon-link\"></span></a>Template Overrides</h1>\n<p><strong>nForm</strong> will render a form control using the default renderer it has access to.<br>\nThere are scenarios where a custom implementation is required, locally for a specific <strong>nForm</strong> instance.\nThe library supports that using template overrides.</p>\n<p>This is a template override:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*nFormOverride</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>name'; let ctx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>{{ ctx.item.label }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">[formControl]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ctx.fControl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p><strong>It says</strong>:<br>\nUse this template to render the control under located in the <strong>name</strong> property.<br>\nInside, the context (<strong>ctx</strong>) attached to control templates is declared and used to display the label and attach the <code class=\"language-text\">FormControl</code>.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n The context also include rich metadata and methods that help\nrendering controls.\n</blockquote>\n<p>In <code class=\"language-text\">&lt;div *nFormOverride=\"'name'; let ctx\"></code>, <code class=\"language-text\">'name'</code> is part of the query to match the control/s to override.</p>\n<h2 id=\"control-query\"><a href=\"#control-query\" aria-hidden><span class=\"icon icon-link\"></span></a>Control Query</h2>\n<p>To replace an existing control or group of controls we first need\nto describe what controls we want to override, this is the control query.</p>\n<p>The query contains 2 fields:</p>\n<ul>\n<li><strong>Control name/path</strong>: <code class=\"language-text\">string | string[]</code> (mandatory)</li>\n<li><strong>Visual type</strong>: <code class=\"language-text\">string | string[]</code></li>\n</ul>\n<p><strong>The control name/path</strong> is the path that leads to the control you want to replace, i.e. the property names on the model (<strong>name</strong> in the example above)</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n You can use dot notation for nested forms.\n</blockquote>\n<p><strong>The visual type</strong> is the group of all controls in the form\nthat match the visual type.</p>\n<p>For example, in the following model definition:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> vType<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The visual type for the property <code class=\"language-text\">name</code> is <strong>text</strong>.</p>\n<h3 id=\"catch-all--fallback\"><a href=\"#catch-all--fallback\" aria-hidden><span class=\"icon icon-link\"></span></a>Catch all / Fallback</h3>\n<p>You can define a catch all / fallback template by setting the control path to <code class=\"language-text\">*</code>. It will match only if template exists for a given control (either by name or by type).</p>\n<p>You can combine <code class=\"language-text\">*</code> with a visual type to define a template override for an entire visual type/s by setting catch all and a visual type/s.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Note that each \n<strong>nForm</strong>\n component has a default renderer defined, setting global catch all template override (\n<code class=\"language-text\">*</code>\n without a visual type) will turn the default render obsolete.\n</blockquote>\n<h2 id=\"declarative-overrides\"><a href=\"#declarative-overrides\" aria-hidden><span class=\"icon icon-link\"></span></a>Declarative Overrides</h2>\n<p>We use the structural directive <code class=\"language-text\">*nFormOverride</code> to declare what and how to override.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>  <span class=\"token attr-name\">*nFormOverride</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>name'; let ctx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- LOCAL IMPLEMENTATION --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>In the example above we assign the local custom template to the field <code class=\"language-text\">name</code>, the template's lifespan is the lifespan of the <strong>nForm</strong> that is the host of the template.</p>\n<p>We can also override the <strong>catch all</strong> (fallback) template, using <code class=\"language-text\">*</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>  <span class=\"token attr-name\">*nFormOverride</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>*'; let ctx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- LOCAL IMPLEMENTATION --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<h3 id=\"targeting-overrides-by-type\"><a href=\"#targeting-overrides-by-type\" aria-hidden><span class=\"icon icon-link\"></span></a>Targeting overrides by type</h3>\n<p>You can also target overrides by the field's visual type:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*nFormOverride</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>*'; let ctx; vType: ['boolean']<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- LOCAL IMPLEMENTATION --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n We've used an array for \n<strong>vType</strong>\n, which also accept a string. Same with field targeting, accepts both string and string array.\n</blockquote>\n<div pbl-example-view=\"pbl-template-overrides-example\"></div>\n<h2 id=\"imperative-overrides\"><a href=\"#imperative-overrides\" aria-hidden><span class=\"icon icon-link\"></span></a>Imperative Overrides</h2>\n<p>Template overrides can also be set using the <strong>nForm</strong> component API.</p>\n<p>Get a hold of the <code class=\"language-text\">PblNformComponent</code> instance and a <code class=\"language-text\">TemplateRef</code> instance and use the <code class=\"language-text\">PblNformComponent.addOverride()</code> method.</p>\n<p>The following example is a nice demonstration of a \"control-less\" form that shows the form as readonly html elements.<br>\nThe template overrides in this case are the catch-all template (*) which apply on all fields.</p>\n<div pbl-example-view=\"pbl-imperative-example\"></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<code class=\"language-text\">*nFormOverride</code>\n is just a syntactic sugar to create a declarative model, it uses the \n<strong>nForm</strong>\n component API to get the job done.\n</blockquote>\n<h2 id=\"precedence\"><a href=\"#precedence\" aria-hidden><span class=\"icon icon-link\"></span></a>Precedence</h2>\n<p>The following represents the precedence when choosing how to render:</p>\n<ol>\n<li>Specific template override (when exists)</li>\n<li>Catch all template override (when exists)</li>\n<li>Default renderer</li>\n</ol>\n"}