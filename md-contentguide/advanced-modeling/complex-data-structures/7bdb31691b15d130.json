{"id":"guide/advanced-modeling/complex-data-structures","title":"Complex Data Structures","contents":"<h1 id=\"complex-data-structures\"><a href=\"#complex-data-structures\" aria-hidden><span class=\"icon icon-link\"></span></a>Complex Data Structures</h1>\n<p>In this chapter we'll describe what is a complex data structure in <strong>nForm</strong> and review some\nclassic examples, this is more of a background and not <strong>nForm</strong> specific but it is required\nto understand advanced modeling.</p>\n<p>Let's start and examine the <code class=\"language-text\">Hero</code> model, there is something common to all properties, what is it:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  hasTracking<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  doubleAgent<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  bmi<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  superPower<span class=\"token operator\">:</span> <span class=\"token string\">'selfHealing'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'flying'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cloaking'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cloning'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'invisibility'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The type off all properties is either <code class=\"language-text\">boolean</code>, <code class=\"language-text\">number</code> or <code class=\"language-text\">string</code>. These are all <strong>primitive</strong> types.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n The JavaScript standard defines 7 data types. 6 primitive types and the \n<code class=\"language-text\">Object</code>\n type.\n</blockquote>\n<p>The common to all properties is that they are all primitives, we call this model a flat model, it has a depth of 1.</p>\n<p>Here is how an instance might look like:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"99\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Super Man\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hasTracking</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">doubleAgent</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bmi</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">superPower</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flying\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>We can imagine how a form will display, labels next to values, flat models are easy to display.</p>\n<h2 id=\"adding-depth\"><a href=\"#adding-depth\" aria-hidden><span class=\"icon icon-link\"></span></a>Adding depth</h2>\n<p>A <strong>non-primitive</strong> type is any type that extends <code class=\"language-text\">Object</code>, these are all types except the 6 primitive\ntypes defined by the standard.</p>\n<p>Within all <strong>non-primitive</strong> types we differentiate 2 sub-groups: <code class=\"language-text\">Array</code> and <code class=\"language-text\">Object</code>.</p>\n<p>Let's see some examples for depth:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>  \n  Prop2<span class=\"token operator\">:</span> Hero<span class=\"token punctuation\">;</span>\n  Prop3<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  Prop4_1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  Prop4_2<span class=\"token operator\">:</span> Hero<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  Prop4_3<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    more<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      deep<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        sea<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<code class=\"language-text\">Object</code>\n is the base type for all non primitive types, \n<code class=\"language-text\">Hero</code>\n is an object.\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<code class=\"language-text\">Array</code>\n is therefor also an \n<code class=\"language-text\">Object</code>\n but it is a special case, handled differently.\n</blockquote>\n<p>Let's review how to work with both types, in the end we will inspect how to perform operations\nrequired when working with complex data structures.</p>\n<h2 id=\"object\"><a href=\"#object\" aria-hidden><span class=\"icon icon-link\"></span></a>Object</h2>\n<p>Our <code class=\"language-text\">Hero</code> model is an object with all properties being primitives.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"99\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Super Man\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hasTracking</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">doubleAgent</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bmi</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">superPower</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flying\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>It is also known as a <em>document</em>.</p>\n<p>Once we add properties that are objects we create <em>embedded documents</em></p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Nemesis</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  nemesis<span class=\"token operator\">:</span> Nemesis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<div><div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Super Man\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hasTracking</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">doubleAgent</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bmi</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">superPower</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flying\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">nemesis</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bat Man\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>How do we display <code class=\"language-text\">nemesis</code>?</p>\n<p>We have 2 options:</p>\n<ol>\n<li>Using a <strong>child form</strong></li>\n<li><strong>Flattening</strong> <code class=\"language-text\">nemesis</code></li>\n</ol>\n<h3 id=\"child-forms\"><a href=\"#child-forms\" aria-hidden><span class=\"icon icon-link\"></span></a>Child Forms</h3>\n<p>A child form is how we tell <strong>nForm</strong> that the type of a property is a <strong>known model</strong>.</p>\n<p>The library will treat this property as a form and the renderer should display it.</p>\n<p>There are a lot of ways for a renderer to implement child forms.<br>\nDialogs, inline, tabs, projection, etc... Each renderer and it's own implementation.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n A \n<strong>known model</strong>\n is a class decorated with \n<code class=\"language-text\">@FormModel()</code>\n. The class is \"known\" to the library.\n</blockquote>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    childForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  nemesis<span class=\"token operator\">:</span> Nemesis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Setting \n<code class=\"language-text\">childForm: true</code>\n is valid only when the type of the property is a \n<strong>known model</strong>\n.\n</blockquote>\n<p><a href=\"../child-forms\">Read more...</a>;</p>\n<h3 id=\"flattening\"><a href=\"#flattening\" aria-hidden><span class=\"icon icon-link\"></span></a>Flattening</h3>\n<p>We've opened this chapter by saying the <code class=\"language-text\">Hero</code> is a flat model, what if we can define how to flatten\nthe <code class=\"language-text\">nemesis</code> property so all of it's properties will be on the <code class=\"language-text\">Hero</code> class?</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Hero properties + ... */</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>We can, it is called flattening and we do it by providing a flattening definition:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    flatten<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          vType<span class=\"token operator\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span>\n          label<span class=\"token operator\">:</span> <span class=\"token string\">'Nemesis ID'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          vType<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n          label<span class=\"token operator\">:</span> <span class=\"token string\">'Nemesis Name'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  nemesis<span class=\"token operator\">:</span> Nemesis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>It might look odd, we are flattening out the <code class=\"language-text\">id</code> and <code class=\"language-text\">name</code> properties from <code class=\"language-text\">Nemesis</code> which already exist in <code class=\"language-text\">Hero</code>.\nThere is no issue because this is not a <strong>structural</strong> change in the model but only in the display.</p>\n<p>The form remains an identical representation of the model the only thing that change is the order and structure of the control we render.</p>\n<p>Flattening definitions work on both known and unknown models. They are not limited in depth (i.e. you can define nested flattening definitions)</p>\n<p>The actual structure of the model we work with and the structure of the form:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Super Man\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hasTracking</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">doubleAgent</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bmi</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">superPower</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flying\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">nemesis</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bat Man\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>However, the way they are presented:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Super Man\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hasTracking</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">doubleAgent</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bmi</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">superPower</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flying\"</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bat Man\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The user will see the labels, not the property names.</p>\n<p><a href=\"../flattening\">Read more...</a>;</p>\n<h2 id=\"arrays\"><a href=\"#arrays\" aria-hidden><span class=\"icon icon-link\"></span></a>Arrays</h2>\n<p>Array's are unique, they create a structure that an <code class=\"language-text\">Object</code> can not represent directly. An indexed list.</p>\n<p>Let change the <code class=\"language-text\">nemesis</code> for the <code class=\"language-text\">Hero</code> so we can set multiple rivals, a list of <code class=\"language-text\">Nemesis</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n\n  nemesis<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Nemesis<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>When we look at the type: <code class=\"language-text\">Array&lt;Nemesis></code>, Array of T. The type of an Array is bound to the type of\nthe children it contains.</p>\n<p>Working with array's does not require special metadata definitions, the definitions set on <code class=\"language-text\">@FormProp</code> are those you would define on the\ntype the array is bound to. Almost like the array is not there.</p>\n<h3 id=\"array-of-primitive\"><a href=\"#array-of-primitive\" aria-hidden><span class=\"icon icon-link\"></span></a>Array of primitive</h3>\n<p>When an array is bound to a primitive the metadata definitions are those of the primitive,\nthe array is only used in the type annotation.</p>\n<h3 id=\"array-of-object\"><a href=\"#array-of-object\" aria-hidden><span class=\"icon icon-link\"></span></a>Array of <code class=\"language-text\">Object</code></h3>\n<p>When the array is bound to a complex type the definitions are those of the complex type an so, all the options we covered above are valid.</p>\n<p>Yes, you can define an flattening definition for the interface <code class=\"language-text\">Nemesis</code> applied for on a list.</p>\n<h3 id=\"working-with-arrays\"><a href=\"#working-with-arrays\" aria-hidden><span class=\"icon icon-link\"></span></a>Working with arrays</h3>\n<p>Working with array's it is best to keep things simple. Simple means array of primitives.\nWhen in need to show an array of complex types prefer <code class=\"language-text\">childForm</code> while showing a list of models and editing each externally.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Avoid flattening declaration over an array. Unless you are building your own custom renderer and you are prepared for surprises.\n</blockquote>\n<p><a href=\"../arrays\">Read more...</a></p>\n<h2 id=\"tools\"><a href=\"#tools\" aria-hidden><span class=\"icon icon-link\"></span></a>Tools</h2>\n<p>Working with flat models does not frequently involve operations on the structure of the model.</p>\n<p>Working with complex data types <strong>does</strong>. Adding and/or removing items from an array,\nassigning a form control to a <code class=\"language-text\">childForm</code> property and more...</p>\n<p>The library provide the tools to simplify the process, which we covered in the <a href=\"../controlling-nform\">Controlling NForm</a> chapter, using <code class=\"language-text\">NForm</code>.</p>\n<!-- <div pbl-example-view=\"pbl-complex-data-structures-example\"></div> -->\n"}