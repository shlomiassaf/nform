{"id":"guide/advanced-modeling/controlling-nform","title":"Controlling Nform","contents":"<h1 id=\"controlling-nform\"><a href=\"#controlling-nform\" aria-hidden><span class=\"icon icon-link\"></span></a>Controlling NForm</h1>\n<p>To create a <strong>nForm</strong> component we need an instance of a model which we bind to the [model] attribute.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-nform</span> <span class=\"token attr-name\">[model]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>model<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-nform</span> <span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>The <strong>nForm</strong> component will use the model to create a <code class=\"language-text\">FormGroup</code> instance and render that instance.</p>\n<p>The model and the form group represent the same entity, the user can edit the form and once done we commit the changes done in the form onto the model.\nThe model and the form group are linked, an operation on one requires the other and there are tasks that apply on both.</p>\n<p>We need a container we can put them both in and let the container manage them internally and expose an interface for us, a controller.</p>\n<p>This is what the <code class=\"language-text\">NForm</code> class does, it is created by the <strong>nForm</strong> component and exposed through the property <code class=\"language-text\">nForm</code>.</p>\n<h2 id=\"nform\"><a href=\"#nform\" aria-hidden><span class=\"icon icon-link\"></span></a>NForm</h2>\n<p>We've <a href=\"../../basics/model-form-sync\">already covered</a> what <code class=\"language-text\">commitToModel()</code> and <code class=\"language-text\">sync()</code> do, let continue from there:</p>\n<h2 id=\"readwrite\"><a href=\"#readwrite\" aria-hidden><span class=\"icon icon-link\"></span></a>Read/Write</h2>\n<p>Using <code class=\"language-text\">getValue</code> and <code class=\"language-text\">setValue</code> we can read/write values from/to the form.</p>\n<p>Using <code class=\"language-text\">getValueModel</code> we can read values from the model.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n All read/write methods support deep paths using dot notation strings or deep path arrays, similar to how it is supported by \n<code class=\"language-text\">@angular/forms</code>\n,\n\n<code class=\"language-text\">getValue</code>\n and \n<code class=\"language-text\">setValue</code>\n are just proxies.\n</blockquote>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<code class=\"language-text\">getValueModel</code>\n is aligned with the API allowing easy access to values on the model based on path's from the form, i.e. using the same path\nyou can get the form value and the model value.\n</blockquote>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n Read/Write operations are common when working with complex data structure such as Array's or nested objects. We will revisit them in the relevant chapters.\n</blockquote>\n<h2 id=\"working-with-arrays\"><a href=\"#working-with-arrays\" aria-hidden><span class=\"icon icon-link\"></span></a>Working with Arrays</h2>\n<p>Adding and removing controls are operations performed on forms with arrays, these are <code class=\"language-text\">FormArray</code> controls.</p>\n<p>When we want to add an item to a <code class=\"language-text\">FormArray</code> we can not added a new instance of the item, we need to add the form control that represent that item.</p>\n<p>For example, a model with the property names of type string[], if we want to push a new string to the names property we can not use the model (<code class=\"language-text\">model.push('new name')</code>) instead we need to push a new <code class=\"language-text\">FormControl</code> to the <code class=\"language-text\">FormArray</code> that represent names.</p>\n<p>What if <strong>names</strong> is not <code class=\"language-text\">string[]</code> but an array of a complex type, a nested model. Now we can't push a <code class=\"language-text\">FormControl</code> we need a <code class=\"language-text\">FormGroup</code>.</p>\n<p>To simplify the process the addControl will do all the work for us.</p>\n<p><code class=\"language-text\">appendControl(path: Array&lt;string | number> | string, value?: any): FormGroup | FormControl</code><br>\nWe just need to provide the full path and a new form control is added. If we provide a <strong>value</strong> it will be used to populate the new control.</p>\n<p><code class=\"language-text\">removeControl(path: Array&lt;string | number> | string, query: number | AbstractControl): AbstractControl | undefined</code><br>\nHere we also need a <strong>query</strong> which is the index we want to remove at or a control which the method will use to resolve the index to remove.</p>\n<blockquote class=\"warn icon\">\n<div class=\"icon-location\"></div>\n The \n<strong>path</strong>\n in the add/remove methods must point to an instance of FormArray\n</blockquote>\n<h2 id=\"working-with-child-forms\"><a href=\"#working-with-child-forms\" aria-hidden><span class=\"icon icon-link\"></span></a>Working with child forms</h2>\n<p><code class=\"language-text\">createChildForm&lt;Z = any>(path: Array&lt;string | number> | string, model?: Z): TDMModelForm&lt;Z></code><br>\nA method that returns a new instance of the <code class=\"language-text\">NForm</code> class based on the type the <strong>path</strong> points at.</p>\n<p>The type must be a known model and explicitly declared as a <code class=\"language-text\">childForm</code> in it's <code class=\"language-text\">FormPropMetadataArgs</code>.\nThe optional model parameter is used to populate the form (hint: use <code class=\"language-text\">getValueModel()</code> to get it)</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n \n<code class=\"language-text\">createChildForm</code>\n is used when working with complex data structures, child forms in particular.\n</blockquote>\n<!-- <div pbl-example-view=\"pbl-controlling-nform-example\"></div> -->\n"}