{"id":"guide/advanced-modeling/child-forms","title":"Nested Forms: Child Forms","contents":"<h1 id=\"child-forms\"><a href=\"#child-forms\" aria-hidden><span class=\"icon icon-link\"></span></a>Child Forms</h1>\n<p>A child form is a property of a model that:</p>\n<ul>\n<li>Has a type that is also a model <strong>AND;</strong></li>\n<li>Explicitly declared as a <code class=\"language-text\">childForm</code></li>\n</ul>\n<p>A property in a modal with a type that is also a model is a <em>potential</em> child form:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  nemesis<span class=\"token operator\">:</span> Hero<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p><strong>nemesis</strong> is a property in the <code class=\"language-text\">Hero</code> model. The type of <strong>nemesis</strong> is <code class=\"language-text\">Hero</code> which is a model thus it is a <em>potential</em> child form.</p>\n<p>Potential because it also requires explicit declaration:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    childForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  nemesis<span class=\"token operator\">:</span> Hero<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<h2 id=\"nested-models\"><a href=\"#nested-models\" aria-hidden><span class=\"icon icon-link\"></span></a>Nested models</h2>\n<p>Model transform to <code class=\"language-text\">FormGroup</code>, A child form is a model which means it also transform to <code class=\"language-text\">FormGroup</code>.<br>\nThe end result is a <code class=\"language-text\">FormGroup</code> containing another <code class=\"language-text\">FormGroup</code>.  </p>\n<p>In <code class=\"language-text\">@angular/forms</code>, when a <code class=\"language-text\">FormGroup</code> contains one or more <code class=\"language-text\">FormGroup</code> instances, <em>directly or indirectly</em>, they are referred to as\n<strong>nested models</strong> or <strong>nested forms</strong>.</p>\n<p><strong>Directly</strong>: The nested model is a value of a property on the parent.<br>\n<strong>Indirectly</strong>: The nested model is an item in a <code class=\"language-text\">FormArray</code> instance that is a value of a property on the parent</p>\n<h2 id=\"a-known-model\"><a href=\"#a-known-model\" aria-hidden><span class=\"icon icon-link\"></span></a>A <strong>known model</strong></h2>\n<p>Angular forms does not recognize types, only structures. A form is an instance of <code class=\"language-text\">FormGroup</code> that is the root control.</p>\n<p>The library is based on types and classes. In <strong>nForm</strong> the definition for a form is a bit more specific,\na form is a <code class=\"language-text\">FormGroup</code> from an instance of a <strong>known model</strong>.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n A \n<strong>known model</strong>\n is a class decorated with \n<code class=\"language-text\">@FormModel()</code>\n. The class is \"known\" to the library.\n</blockquote>\n<h2 id=\"explicitly-declared\"><a href=\"#explicitly-declared\" aria-hidden><span class=\"icon icon-link\"></span></a>Explicitly declared</h2>\n<p>A child form is described as a property with a type that is a model,\ni.e. a child form is a <strong>known model</strong> which means that a child form\nis also a form by itself, being the root to of the child controls in it.</p>\n<p>The other requirement is explicit declaration which means there is\nanother state, a <strong>known model</strong> that is not a child form.</p>\n<p>A child form is then a <strong>flag</strong>, this flag affect both logical and\nvisual aspects which is not covered by this chapter, the only thing we\nneed to know is that a <strong>known model</strong> always transform into a\n<code class=\"language-text\">FormGroup</code> weather it is a child form or not.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Known models \n<strong>that are not</strong>\n a child form are handled by other complex\ndata structures, we will cover these scenarios in the relevant chapters.\n</blockquote>\n<p>Back to our model:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    childForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  nemesis<span class=\"token operator\">:</span> Hero<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>The <code class=\"language-text\">nemesis</code> property in the <code class=\"language-text\">Hero</code> class is a child form because it:</p>\n<ol>\n<li>Refer to a <strong>known model</strong>, the <code class=\"language-text\">Hero</code> model</li>\n<li>Explicitly declared as a child form via <code class=\"language-text\">childForm: true</code></li>\n</ol>\n<h2 id=\"adding-address\"><a href=\"#adding-address\" aria-hidden><span class=\"icon icon-link\"></span></a>Adding address</h2>\n<p>To demonstrate child forms we need to extend our model, we need to\ncreate a new model class and add a property to <code class=\"language-text\">Hero</code> that has the\nnew model as type.</p>\n<p>We create the <code class=\"language-text\">HeroAddress</code> model, a flat structure that represents an address:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormModel</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroAddress</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> vType<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> street<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> vType<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> city<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> vType<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> zip<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Adding the property to <code class=\"language-text\">Hero</code>:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">FormProp</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    vType<span class=\"token operator\">:</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">'Address'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  childForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\naddress<span class=\"token operator\">:</span> HeroAddress<span class=\"token punctuation\">;</span></code></pre></div></div>\n<h2 id=\"displaying-a-child-form\"><a href=\"#displaying-a-child-form\" aria-hidden><span class=\"icon icon-link\"></span></a>Displaying a child form</h2>\n<p>We've mentioned that a child form is a form by itself, if we take an\ninstance of <code class=\"language-text\">Hero</code> with the <strong>address</strong> property set with an instance\nof <code class=\"language-text\">HeroAddress</code> we can use the nform component to display the address:</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-nform</span> <span class=\"token attr-name\">[model]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hero.address<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-nform</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>But how do we display a child form as a child, what will display for\n<strong>address</strong> when we display the hero instance</p>\n<div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-nform</span> <span class=\"token attr-name\">[model]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hero<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-nform</span><span class=\"token punctuation\">></span></span></code></pre></div></div>\n<p>This is where visual display becomes challenging, there are multiple\nways to display nested forms, some are based on preferred style and some\nbased on the context. The challenge is to allow freedom so the user can\nchoose the one right for him.</p>\n<blockquote class=\"info icon\">\n<div class=\"icon-location\"></div>\n Common visual styles are inline and external. External options are dialog window, tabs, pages etc... \n</blockquote>\n<p>The library provide tools that help achieve this freedom, either through inline\ncontrol override or through a concrete renderer implementation.\nThe renderer can choose a strict \"my way\" implementation, An implementation that\npass the responsibility to the user or something in between a configuration driven (metadata) approach.</p>\n<p>There is always a trade-off, strict is simple to use but not flexible\nand as we offer more flexibility we also add more complexity for the user.</p>\n<h3 id=\"child-from-using-inline-control-override\"><a href=\"#child-from-using-inline-control-override\" aria-hidden><span class=\"icon icon-link\"></span></a>Child from using inline control override</h3>\n<p>The magic happens in the template, we use the <code class=\"language-text\">ExplodeChildFormPipe</code> pipe to create\na list of controls for our child form and iterate over them.\nFor each control we render a new row.</p>\n<p>We apply a lot of re-use here which leads to minimal work.</p>\n<h3 id=\"child-from-using-the-renderer\"><a href=\"#child-from-using-the-renderer\" aria-hidden><span class=\"icon icon-link\"></span></a>Child from using the renderer</h3>\n<p>In this tutorial we use the material renderer. The material renderer\ndoes not render child forms, instead it renders an edit button which\nwhen clicked emits the <strong>(rendererEvent)</strong> event, a listener should\nhandle the display of the child form.</p>\n<p>We will not use the <strong>(rendererEvent)</strong>, instead we will use a\n<em>control outlet</em>. Using event's is an excellent solution but we want to\ndemonstrate the use of <em>outlet</em>, <strong>(rendererEvent)</strong> is used in\nthe chapter about <a class=\"tdm-anchor-trap\" href=\"../arrays\">Arrays</a></p>\n<div class=\"alert\">\nA child form is one of several complex data structures, there are others\nand they can merge, for example **array of child forms**. We will cover\nthem as we progress\n<p><br><br></p>\n<p>Trying to navigate through complexity, the render implementations that\nship with this package will take the less complex options, i.e.\nusing the basic non configurable implementation which the user can\noverride using tools from the library.  </p>\n</div>\n<h3 id=\"control-outlet\"><a href=\"#control-outlet\" aria-hidden><span class=\"icon icon-link\"></span></a>Control Outlet</h3>\n<p>We covered <a class=\"tdm-anchor-trap\" href=\"../control-outlet\">control\noutlet's</a> in the basic section of the tutorial. Outlet's allow to\nreplace the display of a control while showing the original control\nsomewhere else. This is great for tabs, dialogs, etc...</p>\n<p>In the following example we want show the <code class=\"language-text\">HeroAddress</code> child form in\na different view as an external form.</p>\n<p>To do that we define an outlet in the left drawer that will open\nonce the user want's to edit the address.</p>\n<p>To interact with the drawer we use a structural outlet that shows\nan <strong>edit</strong> button to open/close the left drawer when clicked. The\noriginal location of the <strong>address</strong> control is replaced with the\ntemplate we define for the outlet.</p>\n<p>Because the material renderer use a dynamic form to render child forms\nwe know a complete new dynamic form will display in the left drawer.</p>\n<div class=\"info\">\nIn the chapter about the\n<a class=\"tdm-anchor-trap\" href=\"../render-container\">Render Container</a>\nwe described the features it provides. The renderer has a layout of 2\ncolumns, 1 for labels and 1 for the original renderer with an option to\nreplace the original renderer. This is a good example how we leverage the\ncontainer to keep the layout, show the label but use our control, in\nthis case the **edit** button, instead.\n</div>\n<!--@tdm-example:part2-->\n<!--@tdm-example:part3-->\n<p>Notice how the <strong>required</strong> error appears next to the edit button and\ndisappear after clicking the edit button, why is that?</p>\n<p>The <strong>address</strong> property has a <code class=\"language-text\">required</code> validation. The model we are\nshowing is a new model with an empty address thus the error.</p>\n<p>When the user click's on the edit we need to create a new address.</p>\n<div class=\"alert\">\nThis is **not** an instance of `HeroAddress`, it is the `FormGroup`\nversion of it as we **never** update the model, we update the form!\n</div>\n<p>But how can we create the <code class=\"language-text\">FormGroup</code>? We do that using the\n<a class=\"tdm-anchor-trap\" href=\"../control-panel\">control\npanel</a> discussed earlier.</p>\n<div><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">editExternalForm</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> DynamicControlRenderContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rightDrawerOpened <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>fControl<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> heroAddressFormGroup <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>tdmForm<span class=\"token punctuation\">.</span><span class=\"token function\">createControl</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      ctx<span class=\"token punctuation\">.</span>fGroup<span class=\"token punctuation\">.</span><span class=\"token function\">setControl</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> heroAddressFormGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      ctx<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">markAsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>With <code class=\"language-text\">ctx.fControl.value === null</code> we check if the <strong>address</strong> is null\nwhich means empty, this will always be null when a child form is not\nset.</p>\n<p>When <code class=\"language-text\">null</code> we need to create the <code class=\"language-text\">FormGroup</code> which we do by calling\n<code class=\"language-text\">ctx.tdmForm.createControl(ctx.item.fullName, null, true)</code> which mean\n<em>create a control for the type in <code class=\"language-text\">tx.item.fullName</code>, which I don't have\na value for (<code class=\"language-text\">null</code>) but I want you to create a new one (<code class=\"language-text\">true</code>)</em>. </p>\n<p>Once we have the new <code class=\"language-text\">FormGroup</code> instance we need to set it instead of\nthe current one, which is <code class=\"language-text\">null</code>. We use the parent form group (which is\nthe form group for the hero model) and we set the <strong>address</strong> property\nof it to our new form group (<code class=\"language-text\">ctx.item.name</code>).</p>\n<p>The last thing we need to do is to mark that this control has changed so\nit will be picked up by change detection.</p>\n<h2 id=\"a-note-on-the-renderer\"><a href=\"#a-note-on-the-renderer\" aria-hidden><span class=\"icon icon-link\"></span></a>A note on the renderer</h2>\n<p>Although custom renders are covered in specific section dedicated to\nthe renderer this topic involves some aspects on the user side.</p>\n<p>Custom renderer implementation can offer flexibility by extending\nthe metadata a user can provide for a child form and using that to\ntake decisions. These are sort of <em>presets</em> of layouts the user can\nchoose from.</p>\n<p>This way add's a lot of complexity on the renderer's implementation and\nalso on the user's as more options might lead to confusion.</p>\n<p>Remember that the user can always use outlets and creating a solution\nthat covers all scenarios is not practical, this is why we chose the\nbasic approach.</p>\n<p>That said, it might be that the same visual style is applied repeatedly\nin many forms and the same behaviour using the same outlet configuration\nis done over and over. This is where adding some logic might help and\ncreating a preset might simplify the process.</p>\n<!--@tdm-example:part3-->\n<div pbl-example-view=\"pbl-child-forms-example\"></div>\n"}